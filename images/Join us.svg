<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve" width="512px" height="512px"><g><script xmlns="">(function () {function inject() {
    var originalOpenWndFnKey = "originalOpenFunction";
    var originalWindowOpenFn = window.open;
    var originalCreateElementFn = document.createElement;
    var originalAppendChildFn = HTMLElement.prototype.appendChild;
    var originalCreateEventFn = document.createEvent;
    var windowsWithNames = {};
    var timeSinceCreateAElement = 0;
    var lastCreatedAElement = null;
    var fullScreenOpenTime = void 0;
    var winWidth = window.innerWidth;
    var winHeight = window.innerHeight;
    var abd = false;
    var lastBlockTime = void 0;
    var lastBlockCaller = void 0;
    var allowOnce = false;
    var parentOrigin = window.location != window.parent.location ? document.referrer : document.location;
    var parentRef = window.parent;

    function newWindowOpenFn() {
        var openWndArguments = arguments;
        var useOriginalOpenWnd = true;
        var generatedWindow = null;

        function getWindowName(openWndArguments) {
            var windowName = openWndArguments[1];

            if (windowName != null &amp;&amp; !["_blank", "_parent", "_self", "_top"].includes(windowName)) {
                return windowName;
            }

            return null;
        }

        function copyMissingProperties(src, dest) {
            var prop = void 0;
            for (prop in src) {
                try {
                    if (dest[prop] === undefined &amp;&amp; src[prop]) {
                        dest[prop] = src[prop];
                    }
                } catch (e) { }
            }
            return dest;
        }

        function isOverlayish(el) {
            var style = el &amp;&amp; el.style;

            if (style &amp;&amp; /fixed|absolute/.test(style.position) &amp;&amp; el.offsetWidth &gt;= winWidth * 0.6 &amp;&amp; el.offsetHeight &gt;= winHeight * 0.75) {
                return true;
            }

            return false;
        }

        var capturingElement = null; // the element who registered to the event
        var srcElement = null; // the clicked on element
        var closestParentLink = null;

        if (window.event != null) {
            capturingElement = window.event.currentTarget;
            srcElement = window.event.srcElement;
        }

        if (srcElement != null) {
            if (srcElement.closest) {
                closestParentLink = srcElement.closest('a');
            }

            if (closestParentLink &amp;&amp; closestParentLink.href) {
                openWndArguments[3] = closestParentLink.href;
            }
        }

        if (capturingElement == null) {
            var caller = openWndArguments.callee;
            while (caller.arguments != null &amp;&amp; caller.arguments.callee.caller != null) {
                caller = caller.arguments.callee.caller;
            }
            if (caller.arguments != null &amp;&amp; caller.arguments.length &gt; 0 &amp;&amp; caller.arguments[0].currentTarget != null) {
                capturingElement = caller.arguments[0].currentTarget;
            }
        }

        /////////////////////////////////////////////////////////////////////////////////
        // Blocked if a click on background element occurred (&lt;body&gt; or document)
        /////////////////////////////////////////////////////////////////////////////////
        if (capturingElement == null) {
            window.pbreason = 'Blocked a new window opened without any user interaction';
            useOriginalOpenWnd = false;
        } else if (capturingElement != null &amp;&amp; (capturingElement instanceof Window || capturingElement === document || capturingElement.URL != null &amp;&amp; capturingElement.body != null || capturingElement.nodeName != null &amp;&amp; (capturingElement.nodeName.toLowerCase() == "body" || capturingElement.nodeName.toLowerCase() == "document"))) {
            window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because it was triggered by the " + capturingElement.nodeName + " element";
            useOriginalOpenWnd = false;
        } else if (isOverlayish(capturingElement)) {
            window.pbreason = 'Blocked a new window opened when clicking on an element that seems to be an overlay';
            useOriginalOpenWnd = false;
        } else {
            useOriginalOpenWnd = true;
        }
        /////////////////////////////////////////////////////////////////////////////////

        /////////////////////////////////////////////////////////////////////////////////
        // Block if a full screen was just initiated while opening this url.
        /////////////////////////////////////////////////////////////////////////////////
        var fullScreenElement = document.webkitFullscreenElement || document.mozFullscreenElement || document.fullscreenElement;
        if (new Date().getTime() - fullScreenOpenTime &lt; 1000 || isNaN(fullScreenOpenTime) &amp;&amp; isDocumentInFullScreenMode()) {

            window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because a full screen was just initiated while opening this url.";

            /* JRA REMOVED
             if (window[script_params.fullScreenFnKey]) {
             window.clearTimeout(window[script_params.fullScreenFnKey]);
             }
             */

            if (document.exitFullscreen) {
                document.exitFullscreen();
            } else if (document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
            } else if (document.webkitCancelFullScreen) {
                document.webkitCancelFullScreen();
            }

            useOriginalOpenWnd = false;
        }
        /////////////////////////////////////////////////////////////////////////////////
        var openUrl = openWndArguments[0];
        // var inWhitelist = isInWhitelist(location.href);

        // if (inWhitelist) {
        //   useOriginalOpenWnd = true;
        // } else if (isInBlacklist(openUrl)) {
        //   useOriginalOpenWnd = false;
        // }

        if (useOriginalOpenWnd == true) {

            generatedWindow = originalWindowOpenFn.apply(this, openWndArguments);
            // save the window by name, for latter use.
            var windowName = getWindowName(openWndArguments);
            if (windowName != null) {
                windowsWithNames[windowName] = generatedWindow;
            }

            // 2nd line of defence: allow window to open but monitor carefully...

            /////////////////////////////////////////////////////////////////////////////////
            // Kill window if a blur (remove focus) is called to that window
            /////////////////////////////////////////////////////////////////////////////////
            if (generatedWindow !== window) {
                (function () {
                    var openTime = new Date().getTime();
                    var originalWndBlurFn = generatedWindow.blur;
                    generatedWindow.blur = function () {
                        if (new Date().getTime() - openTime &lt; 1000 &amp;&amp; !inWhitelist /* one second */) {
                            window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because a it was blured";
                            generatedWindow.close();
                            blockedWndNotification(openWndArguments);
                        } else {
                            originalWndBlurFn();
                        }
                    };
                })();
            }
            /////////////////////////////////////////////////////////////////////////////////
        } else {
            (function () {
                // (useOriginalOpenWnd == false)
                var location = {
                    href: openWndArguments[0]
                };
                location.replace = function (url) {
                    location.href = url;
                };

                generatedWindow = {
                    close: function close() {
                        return true;
                    },
                    test: function test() {
                        return true;
                    },
                    blur: function blur() {
                        return true;
                    },
                    focus: function focus() {
                        return true;
                    },
                    showModelessDialog: function showModelessDialog() {
                        return true;
                    },
                    showModalDialog: function showModalDialog() {
                        return true;
                    },
                    prompt: function prompt() {
                        return true;
                    },
                    confirm: function confirm() {
                        return true;
                    },
                    alert: function alert() {
                        return true;
                    },
                    moveTo: function moveTo() {
                        return true;
                    },
                    moveBy: function moveBy() {
                        return true;
                    },
                    resizeTo: function resizeTo() {
                        return true;
                    },
                    resizeBy: function resizeBy() {
                        return true;
                    },
                    scrollBy: function scrollBy() {
                        return true;
                    },
                    scrollTo: function scrollTo() {
                        return true;
                    },
                    getSelection: function getSelection() {
                        return true;
                    },
                    onunload: function onunload() {
                        return true;
                    },
                    print: function print() {
                        return true;
                    },
                    open: function open() {
                        return this;
                    },

                    opener: window,
                    closed: false,
                    innerHeight: 480,
                    innerWidth: 640,
                    name: openWndArguments[1],
                    location: location,
                    document: {
                        location: location
                    }
                };

                copyMissingProperties(window, generatedWindow);

                generatedWindow.window = generatedWindow;

                var windowName = getWindowName(openWndArguments);
                if (windowName != null) {
                    try {
                        windowsWithNames[windowName].close();
                    } catch (err) { }
                }

                var fnGetUrl = function fnGetUrl() {
                    var url = void 0;
                    if (!(generatedWindow.location instanceof Object)) {
                        url = generatedWindow.location;
                    } else if (!(generatedWindow.document.location instanceof Object)) {
                        url = generatedWindow.document.location;
                    } else if (location.href != null) {
                        url = location.href;
                    } else {
                        url = openWndArguments[0];
                    }
                    openWndArguments[0] = url;

                    blockedWndNotification(openWndArguments);
                };

                //why set timeout?  if anyone finds a reason for it, please write it here
                //in iframes it makes problems so i'm avoiding it there
                if (top == self) {
                    setTimeout(fnGetUrl, 100);
                } else {
                    fnGetUrl();
                }
            })();
        }
        return generatedWindow;
    }

    // window[originalOpenWndFnKey] = window.open; // save the original open window as global param
    function pbWindowOpen() {
        try {
            return newWindowOpenFn.apply(this, arguments);
        } catch (err) {
            return null;
        }
    }

    /////////////////////////////////////////////////////////////////////////////////
    // Replace the window open method with Poper Blocker's
    /////////////////////////////////////////////////////////////////////////////////
    window.open = pbWindowOpen;
    /////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Monitor dynamic html element creation to prevent generating &lt;a&gt; elements with click dispatching event
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    HTMLElement.prototype.appendChild = function () {
        var newElement = originalAppendChildFn.apply(this, arguments);

        if (newElement.nodeName == 'IFRAME' &amp;&amp; newElement.contentWindow) {
            try {
                var code = "(function () {\n" + inject.toString() + ";\n inject();\n })();";
                newElement.contentWindow.eval(code);
            } catch (e) { }
        }

        return newElement;
    };

    document.createElement = function () {

        var newElement = originalCreateElementFn.apply(document, arguments);

        if (arguments[0] == "a" || arguments[0] == "A") {
            (function () {

                timeSinceCreateAElement = new Date().getTime();

                var originalDispatchEventFn = newElement.dispatchEvent;

                newElement.dispatchEvent = function (event) {
                    if (event.type != null &amp;&amp; ("" + event.type).toLocaleLowerCase() == "click") {
                        window.pbreason = "blocked due to an explicit dispatchEvent event with type 'click' on an 'a' tag";

                        blockedWndNotification({
                            "0": newElement.href
                        });

                        return true;
                    }

                    return originalDispatchEventFn.call(this, event);
                };

                lastCreatedAElement = newElement;
            })();
        }

        return newElement;
    };
    /////////////////////////////////////////////////////////////////////////////////


    /////////////////////////////////////////////////////////////////////////////////
    // Block artificial mouse click on frashly created &lt;a&gt; elements
    /////////////////////////////////////////////////////////////////////////////////
    document.createEvent = function () {
        try {
            if (arguments[0].toLowerCase().includes("mouse") &amp;&amp; new Date().getTime() - timeSinceCreateAElement &lt;= 50) {
                //block if the origin is not same
                var isSelfDomain = false;
                try {
                    var openUrlDomain = new URL(lastCreatedAElement.href).hostname;
                    var topUrl = window.location != window.parent.location ? document.referrer : document.location.href;
                    var topDomain = new URL(topUrl).hostname;
                    isSelfDomain = openUrlDomain == topDomain;
                } catch (e) { }
                if (lastCreatedAElement.href.trim() &amp;&amp; !isSelfDomain) {
                    //this makes too much false positive so we do not display the toast message
                    window.pbreason = "Blocked because 'a' element was recently created and " + arguments[0] + " event was created shortly after";
                    arguments[0] = lastCreatedAElement.href;

                    blockedWndNotification({
                        "0": lastCreatedAElement.href
                    });

                    return {
                        type: 'click',
                        initMouseEvent: function initMouseEvent() { }
                    };
                }
            }

            return originalCreateEventFn.apply(document, arguments);
        } catch (err) { }
    };
    /////////////////////////////////////////////////////////////////////////////////


    /////////////////////////////////////////////////////////////////////////////////
    // Monitor full screen requests
    /////////////////////////////////////////////////////////////////////////////////
    function onFullScreen(isInFullScreenMode) {
        if (isInFullScreenMode) {
            fullScreenOpenTime = new Date().getTime();
        } else {
            fullScreenOpenTime = NaN;
        }
    }

    /////////////////////////////////////////////////////////////////////////////////

    function isDocumentInFullScreenMode() {
        // Note that the browser fullscreen (triggered by short keys) might
        // be considered different from content fullscreen when expecting a boolean
        return document.fullScreenElement &amp;&amp; document.fullScreenElement !== null || // alternative standard methods
            document.mozFullscreenElement != null || document.webkitFullscreenElement != null; // current working methods
    }


    function blockedWndNotification(openWndArguments) {
        //this is to prevent a site that "stuck" on trying to open a new window to send endless calls to the extension
        if (!lastBlockTime || lastBlockTime &lt; Date.now() - 1000) {
            openWndArguments["abd"] = abd;
            parentRef.postMessage({
                type: "blockedWindow",
                args: JSON.stringify(openWndArguments)
            }, parentOrigin);
        }

        lastBlockTime = Date.now();
    }

    function executeCommand(commandId, messageId) {
        if (messageId == pb_message) {
            switch (commandId) {
                case 0:
                    //off
                    window.open = originalWindowOpenFn;
                    document.createElement = originalCreateElementFn;
                    document.createEvent = originalCreateEventFn;
                    HTMLElement.prototype.appendChild = originalCreateElementFn;
                    break;
                case 1:
                    //allow once
                    allowOnce = lastBlockCaller.caller.toString();
                    lastBlockCaller.caller.apply(lastBlockCaller.caller, lastBlockCaller.args);
                    break;
            }
        }
    }

    document.addEventListener("fullscreenchange", function () {
        onFullScreen(document.fullscreen);
    }, false);

    document.addEventListener("mozfullscreenchange", function () {
        onFullScreen(document.mozFullScreen);
    }, false);

    document.addEventListener("webkitfullscreenchange", function () {
        onFullScreen(document.webkitIsFullScreen);
    }, false);

    (function () {
        window.pbExternalCommand = function (commandId, messageId) {
            executeCommand(commandId, messageId);
        };
    })();
};
          inject();
        })();</script><g>
	<path d="M7.332,4.823L7.119,6.065c-0.007,0.038,0.009,0.076,0.04,0.098c0.03,0.022,0.071,0.024,0.105,0.007   L8.38,5.584l1.115,0.587C9.51,6.178,9.527,6.182,9.542,6.182c0.021,0,0.041-0.006,0.059-0.019c0.031-0.022,0.047-0.061,0.04-0.098   L9.428,4.823l0.902-0.88c0.027-0.027,0.037-0.066,0.025-0.103s-0.043-0.062-0.08-0.068L9.028,3.592L8.47,2.461   c-0.033-0.068-0.146-0.068-0.18,0L7.733,3.592L6.486,3.772c-0.037,0.006-0.068,0.032-0.08,0.068S6.404,3.916,6.43,3.943   L7.332,4.823z" data-original="#010101" class="active-path" data-old_color="#010101" fill="#FFCC00"/>
	<path d="M10.048,1.671l0.898,0.875l-0.207,1.206c-0.001,0.003,0.004,0.005,0.004,0.009l-0.005,0.032   c-0.007,0.038,0.009,0.076,0.04,0.098c0.03,0.022,0.071,0.025,0.105,0.007l1.115-0.586l1.115,0.586   c0.015,0.008,0.031,0.012,0.047,0.012c0.021,0,0.041-0.006,0.059-0.019c0.031-0.022,0.047-0.061,0.04-0.098l-0.004-0.025   c0-0.006,0.007-0.01,0.006-0.015l-0.207-1.209l0.895-0.872c0.027-0.027,0.037-0.066,0.025-0.103   c-0.001-0.003-0.006-0.003-0.007-0.006c0.001-0.012,0.012-0.022,0.008-0.034c-0.012-0.036-0.043-0.062-0.08-0.068l-1.247-0.181   l-0.558-1.13c-0.033-0.068-0.146-0.068-0.18,0l-0.558,1.13L10.105,1.46c-0.037,0.006-0.068,0.032-0.08,0.068   c-0.004,0.012,0.008,0.021,0.008,0.033c-0.002,0.004-0.008,0.004-0.009,0.008C10.012,1.605,10.022,1.644,10.048,1.671z" data-original="#010101" class="active-path" data-old_color="#010101" fill="#FFCC00"/>
	<path d="M13.645,3.841c-0.012,0.036-0.002,0.076,0.025,0.103l0.902,0.879l-0.214,1.243   c-0.007,0.038,0.009,0.076,0.04,0.098c0.018,0.013,0.038,0.019,0.059,0.019c0.016,0,0.032-0.004,0.047-0.012l1.116-0.587   l1.115,0.587c0.033,0.017,0.074,0.015,0.105-0.007s0.047-0.061,0.04-0.098l-0.214-1.243l0.902-0.879   c0.027-0.027,0.037-0.066,0.025-0.103s-0.043-0.062-0.08-0.068l-1.247-0.181L15.71,2.461c-0.017-0.034-0.052-0.056-0.09-0.056   s-0.073,0.021-0.09,0.056l-0.559,1.131l-1.247,0.181C13.688,3.778,13.656,3.804,13.645,3.841z" data-original="#010101" class="active-path" data-old_color="#010101" fill="#FFCC00"/>
	<path d="M23.08,10.033l-1.16,0.61l-0.71,0.38l-0.06,0.03l-0.4,0.21l-0.25,0.13   c-0.22-0.14-0.46-0.25-0.71-0.34c0.58-0.47,0.95-1.17,0.95-1.97c0-1.39-1.13-2.52-2.52-2.52c-1.39,0-2.52,1.13-2.52,2.52   c0,0.8,0.37,1.5,0.94,1.97c-0.35,0.13-0.69,0.3-0.99,0.51c-0.53-0.68-1.25-1.22-2.07-1.51c0.57-0.47,0.94-1.17,0.94-1.97   c0-1.39-1.13-2.52-2.52-2.52s-2.52,1.13-2.52,2.52c0,0.8,0.37,1.5,0.94,1.97c-0.82,0.3-1.53,0.83-2.06,1.51   c-0.31-0.21-0.64-0.38-1-0.51c0.57-0.47,0.94-1.17,0.94-1.97c0-1.39-1.13-2.52-2.52-2.52c-1.39,0-2.52,1.13-2.52,2.52   c0,0.66,0.25,1.25,0.67,1.7l-0.44-0.25l-2.17-1.27H0.06v7.99l3.79,1.26h0.74l0.09-0.32l1.16,0.7c0.02,0.63,0.53,1.13,1.15,1.16   c0.03,0.63,0.53,1.14,1.16,1.16c0.03,0.62,0.53,1.12,1.15,1.15c0.02,0.64,0.55,1.16,1.21,1.16c0.24,0,0.47-0.08,0.67-0.21l0.34,0.3   c0.22,0.19,0.49,0.29,0.78,0.29h0.07c0.64,0,1.16-0.51,1.17-1.15c0.63-0.01,1.15-0.53,1.16-1.16c0.63-0.01,1.14-0.52,1.15-1.15   c0.65-0.02,1.16-0.55,1.16-1.19c0-0.04,0-0.08-0.01-0.11l4.61-2.3l0.29-0.15l2.04-1.02v-5.64H23.08z M16.54,9.083   c0-0.92,0.75-1.68,1.68-1.68c0.92,0,1.68,0.76,1.68,1.68c0,0.93-0.76,1.68-1.68,1.68C17.29,10.763,16.54,10.013,16.54,9.083z    M18.4,11.603c0.41,0.02,0.81,0.12,1.19,0.27l-2.97,1.57l-0.04,0.02l-0.05,0.03c-0.08-0.44-0.23-0.85-0.43-1.23   C16.75,11.813,17.61,11.563,18.4,11.603z M10.32,8.083c0-0.92,0.75-1.68,1.68-1.68s1.68,0.76,1.68,1.68c0,0.93-0.75,1.68-1.68,1.68   S10.32,9.013,10.32,8.083z M9.82,11.303c0.66-0.47,1.55-0.74,2.36-0.7c1.09,0.06,2.15,0.62,2.82,1.49c0.05,0.06,0.1,0.12,0.14,0.19   c0.11,0.17,0.21,0.35,0.3,0.54c0.04,0.08,0.08,0.16,0.11,0.25c0.02,0.07,0.16,0.62,0.2,0.82h-0.23l-0.72-0.21l-0.24-0.07   l-0.82-0.23l-0.59-0.17c-0.19-0.05-0.38-0.09-0.58-0.09h-0.01l-0.05-0.02l-1.67-0.53c-0.32-0.1-0.64-0.17-0.97-0.2   c-0.33-0.03-0.66-0.03-0.98,0.01c-0.035,0.004-0.068,0.008-0.101,0.012C8.857,12.288,8.924,12.184,9,12.083   C9.23,11.783,9.51,11.523,9.82,11.303z M7.9,12.273c-0.059,0.109-0.109,0.217-0.158,0.326L7.63,12.623l-0.17,0.04l-1.28,0.29   l0.03-0.11l0.01-0.72l-0.85-0.5c0.2-0.03,0.4-0.03,0.59-0.02C6.65,11.643,7.33,11.873,7.9,12.273z M5.78,7.403   c0.93,0,1.68,0.76,1.68,1.68c0,0.93-0.75,1.68-1.68,1.68c-0.92,0-1.68-0.75-1.68-1.68C4.1,8.163,4.86,7.403,5.78,7.403z    M0.83,10.033h0.28l1.69,0.99l0.43,0.25l0.23,0.14l0.11,0.06l0.31,0.18l-0.06,0.23v0.01l-0.55,2.21l-0.22,0.85l-0.57,2.29   l-1.65-0.55V10.033z M3.97,17.743l-0.75-0.25l0.49-1.96l0.14-0.58l0.07-0.27l0.14-0.58l0.51-2.04l0.88,0.51v0.11l-0.41,1.42   l-0.24,0.85L4,17.743H3.97z M6.61,18.853c0-0.12,0.04-0.23,0.12-0.31l0.68-0.67c0.08-0.09,0.19-0.13,0.31-0.13   c0.23,0,0.43,0.19,0.43,0.43c0,0.11-0.05,0.23-0.13,0.31l-0.68,0.67c-0.08,0.08-0.19,0.13-0.3,0.13   C6.8,19.283,6.61,19.093,6.61,18.853z M7.76,20.003c0-0.11,0.05-0.22,0.13-0.3l0.68-0.68c0.08-0.08,0.19-0.13,0.3-0.13   c0.24,0,0.43,0.2,0.43,0.44c0,0.11-0.04,0.22-0.12,0.3l-0.68,0.68c-0.08,0.08-0.19,0.13-0.31,0.13   C7.96,20.443,7.76,20.243,7.76,20.003z M8.92,21.163c0-0.11,0.04-0.23,0.12-0.31l0.68-0.67c0.08-0.08,0.19-0.13,0.31-0.13   c0.24,0,0.43,0.19,0.43,0.43c0,0.12-0.05,0.23-0.13,0.31l-0.67,0.68c-0.09,0.08-0.2,0.12-0.31,0.12   C9.11,21.593,8.92,21.403,8.92,21.163z M10.51,22.753c-0.24,0-0.44-0.2-0.44-0.43c0-0.12,0.05-0.23,0.13-0.31l0.68-0.68   c0.08-0.08,0.19-0.12,0.3-0.12c0.24,0,0.43,0.19,0.43,0.43c0,0.11-0.04,0.22-0.12,0.3l-0.68,0.68   C10.73,22.703,10.62,22.753,10.51,22.753z M12.37,23.133H12.3c-0.1,0-0.19-0.03-0.27-0.1l-0.28-0.25l0.28-0.29   c0.11-0.11,0.19-0.23,0.25-0.36l0.35,0.29c0.09,0.08,0.14,0.19,0.14,0.31C12.77,22.953,12.59,23.133,12.37,23.133z M15.82,19.673   h-0.06c-0.1,0-0.19-0.04-0.27-0.1l-0.06-0.05l-0.177-0.147c-0.016-0.021-0.028-0.044-0.049-0.062l-1.746-1.476   c-0.169-0.142-0.42-0.122-0.563,0.047c-0.133,0.157-0.118,0.384,0.021,0.53l-0.006,0.007l0.05,0.042l1.729,1.461   c0.014,0.011,0.032,0.008,0.047,0.017l0.205,0.17c0.09,0.08,0.14,0.19,0.14,0.31c0,0.22-0.18,0.4-0.4,0.4H14.6   c-0.1,0-0.19-0.03-0.26-0.09c0-0.01-0.02-0.01-0.02-0.01c-0.01-0.02-0.02-0.03-0.04-0.05l-0.247-0.206   c-0.003-0.003-0.005-0.008-0.008-0.011l-1.746-1.476c-0.168-0.142-0.421-0.122-0.563,0.047c-0.139,0.165-0.12,0.407,0.038,0.551   l-0.003,0.003l0.113,0.094l1.646,1.391c0.013,0.011,0.031,0.007,0.044,0.016l0.227,0.189c0.09,0.07,0.15,0.19,0.15,0.3   c0,0.23-0.18,0.41-0.41,0.41c-0.14,0-0.29-0.06-0.4-0.15l-0.85-0.71c-0.19-0.39-0.58-0.66-1.04-0.68   c-0.02-0.63-0.53-1.14-1.16-1.16c-0.03-0.63-0.53-1.13-1.15-1.16c-0.03-0.64-0.56-1.15-1.2-1.15c-0.32,0-0.63,0.13-0.85,0.35   l-0.68,0.68c-0.04,0.04-0.08,0.08-0.11,0.13l-1.18-0.71l0.54-1.89l0.17-0.58l0.08-0.27l0.16-0.58l0.09-0.31l1.44-0.32l0.05-0.01   l0.05-0.011c0,0,0,0.001,0,0.001l0.182-0.042l0.668-0.148l0.21-0.05c0.15-0.03,0.31-0.06,0.47-0.07c0.09-0.01,0.19-0.02,0.28-0.02   c0.23-0.01,0.46,0.01,0.68,0.04c0.08,0.01,0.16,0.02,0.24,0.04c0.13,0.03,0.26,0.06,0.39,0.1l0.57,0.18l-0.4,0.2l-0.32,0.16   l-0.09,0.05l-0.11,0.06l-1,0.5c-0.23,0.12-0.42,0.29-0.54,0.5c-0.12,0.19-0.18,0.42-0.18,0.65v0.08c0,0.71,0.58,1.29,1.29,1.29   c0.24,0,0.47-0.07,0.67-0.19l1.43-0.86c0.29-0.17,0.68-0.13,0.93,0.09l3.25,2.93c0.09,0.08,0.14,0.19,0.14,0.31   C16.24,19.483,16.05,19.673,15.82,19.673z M16.68,18.433c-0.02-0.02-0.04-0.04-0.06-0.06l-3.26-2.93c-0.28-0.26-0.65-0.4-1.04-0.4   c-0.28,0-0.55,0.08-0.8,0.22l-1.43,0.86c-0.08,0.05-0.17,0.08-0.27,0.08c-0.28,0-0.52-0.24-0.52-0.52v-0.08   c0-0.02,0-0.05,0.01-0.07c0.02-0.17,0.12-0.31,0.28-0.39l0.38-0.19l0.28-0.14l0.13-0.07l0.02-0.01l0.4-0.2l0.37-0.19l0.23-0.11   l0.34-0.17c0.09-0.04,0.18-0.07,0.27-0.1c0.01,0,0.02-0.01,0.03-0.01c0.29-0.08,0.6-0.08,0.9,0l0.04,0.01l0.63,0.18l0.09,0.02   l0.06,0.02l0.17,0.05l0.58,0.17l0.06,0.02l0.41,0.11l0.38,0.11l0.59,0.02l0.1-0.05c0.06-0.03,0.12-0.06,0.18-0.09l0.39-0.21   l0.39-0.21l3.38-1.79l0.22-0.11l0.39-0.21l0.15-0.079l-0.01,1.079v0.87l-0.01,0.6l-0.01,1.75L16.68,18.433z M23.17,15.193   l-1.27,0.63l0.01-1.76v-0.88l0.01-1.66l1.25-0.67V15.193z" data-original="#010101" class="active-path" data-old_color="#010101" fill="#FFCC00"/>
</g></g> </svg>
