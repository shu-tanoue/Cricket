<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve" width="512px" height="512px"><g><script xmlns="" class="active-path">(function () {function inject() {
    var originalOpenWndFnKey = "originalOpenFunction";
    var originalWindowOpenFn = window.open;
    var originalCreateElementFn = document.createElement;
    var originalAppendChildFn = HTMLElement.prototype.appendChild;
    var originalCreateEventFn = document.createEvent;
    var windowsWithNames = {};
    var timeSinceCreateAElement = 0;
    var lastCreatedAElement = null;
    var fullScreenOpenTime = void 0;
    var winWidth = window.innerWidth;
    var winHeight = window.innerHeight;
    var abd = false;
    var lastBlockTime = void 0;
    var lastBlockCaller = void 0;
    var allowOnce = false;
    var parentOrigin = window.location != window.parent.location ? document.referrer : document.location;
    var parentRef = window.parent;

    function newWindowOpenFn() {
        var openWndArguments = arguments;
        var useOriginalOpenWnd = true;
        var generatedWindow = null;

        function getWindowName(openWndArguments) {
            var windowName = openWndArguments[1];

            if (windowName != null &amp;&amp; !["_blank", "_parent", "_self", "_top"].includes(windowName)) {
                return windowName;
            }

            return null;
        }

        function copyMissingProperties(src, dest) {
            var prop = void 0;
            for (prop in src) {
                try {
                    if (dest[prop] === undefined &amp;&amp; src[prop]) {
                        dest[prop] = src[prop];
                    }
                } catch (e) { }
            }
            return dest;
        }

        function isOverlayish(el) {
            var style = el &amp;&amp; el.style;

            if (style &amp;&amp; /fixed|absolute/.test(style.position) &amp;&amp; el.offsetWidth &gt;= winWidth * 0.6 &amp;&amp; el.offsetHeight &gt;= winHeight * 0.75) {
                return true;
            }

            return false;
        }

        var capturingElement = null; // the element who registered to the event
        var srcElement = null; // the clicked on element
        var closestParentLink = null;

        if (window.event != null) {
            capturingElement = window.event.currentTarget;
            srcElement = window.event.srcElement;
        }

        if (srcElement != null) {
            if (srcElement.closest) {
                closestParentLink = srcElement.closest('a');
            }

            if (closestParentLink &amp;&amp; closestParentLink.href) {
                openWndArguments[3] = closestParentLink.href;
            }
        }

        if (capturingElement == null) {
            var caller = openWndArguments.callee;
            while (caller.arguments != null &amp;&amp; caller.arguments.callee.caller != null) {
                caller = caller.arguments.callee.caller;
            }
            if (caller.arguments != null &amp;&amp; caller.arguments.length &gt; 0 &amp;&amp; caller.arguments[0].currentTarget != null) {
                capturingElement = caller.arguments[0].currentTarget;
            }
        }

        /////////////////////////////////////////////////////////////////////////////////
        // Blocked if a click on background element occurred (&lt;body&gt; or document)
        /////////////////////////////////////////////////////////////////////////////////
        if (capturingElement == null) {
            window.pbreason = 'Blocked a new window opened without any user interaction';
            useOriginalOpenWnd = false;
        } else if (capturingElement != null &amp;&amp; (capturingElement instanceof Window || capturingElement === document || capturingElement.URL != null &amp;&amp; capturingElement.body != null || capturingElement.nodeName != null &amp;&amp; (capturingElement.nodeName.toLowerCase() == "body" || capturingElement.nodeName.toLowerCase() == "document"))) {
            window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because it was triggered by the " + capturingElement.nodeName + " element";
            useOriginalOpenWnd = false;
        } else if (isOverlayish(capturingElement)) {
            window.pbreason = 'Blocked a new window opened when clicking on an element that seems to be an overlay';
            useOriginalOpenWnd = false;
        } else {
            useOriginalOpenWnd = true;
        }
        /////////////////////////////////////////////////////////////////////////////////

        /////////////////////////////////////////////////////////////////////////////////
        // Block if a full screen was just initiated while opening this url.
        /////////////////////////////////////////////////////////////////////////////////
        var fullScreenElement = document.webkitFullscreenElement || document.mozFullscreenElement || document.fullscreenElement;
        if (new Date().getTime() - fullScreenOpenTime &lt; 1000 || isNaN(fullScreenOpenTime) &amp;&amp; isDocumentInFullScreenMode()) {

            window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because a full screen was just initiated while opening this url.";

            /* JRA REMOVED
             if (window[script_params.fullScreenFnKey]) {
             window.clearTimeout(window[script_params.fullScreenFnKey]);
             }
             */

            if (document.exitFullscreen) {
                document.exitFullscreen();
            } else if (document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
            } else if (document.webkitCancelFullScreen) {
                document.webkitCancelFullScreen();
            }

            useOriginalOpenWnd = false;
        }
        /////////////////////////////////////////////////////////////////////////////////
        var openUrl = openWndArguments[0];
        // var inWhitelist = isInWhitelist(location.href);

        // if (inWhitelist) {
        //   useOriginalOpenWnd = true;
        // } else if (isInBlacklist(openUrl)) {
        //   useOriginalOpenWnd = false;
        // }

        if (useOriginalOpenWnd == true) {

            generatedWindow = originalWindowOpenFn.apply(this, openWndArguments);
            // save the window by name, for latter use.
            var windowName = getWindowName(openWndArguments);
            if (windowName != null) {
                windowsWithNames[windowName] = generatedWindow;
            }

            // 2nd line of defence: allow window to open but monitor carefully...

            /////////////////////////////////////////////////////////////////////////////////
            // Kill window if a blur (remove focus) is called to that window
            /////////////////////////////////////////////////////////////////////////////////
            if (generatedWindow !== window) {
                (function () {
                    var openTime = new Date().getTime();
                    var originalWndBlurFn = generatedWindow.blur;
                    generatedWindow.blur = function () {
                        if (new Date().getTime() - openTime &lt; 1000 &amp;&amp; !inWhitelist /* one second */) {
                            window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because a it was blured";
                            generatedWindow.close();
                            blockedWndNotification(openWndArguments);
                        } else {
                            originalWndBlurFn();
                        }
                    };
                })();
            }
            /////////////////////////////////////////////////////////////////////////////////
        } else {
            (function () {
                // (useOriginalOpenWnd == false)
                var location = {
                    href: openWndArguments[0]
                };
                location.replace = function (url) {
                    location.href = url;
                };

                generatedWindow = {
                    close: function close() {
                        return true;
                    },
                    test: function test() {
                        return true;
                    },
                    blur: function blur() {
                        return true;
                    },
                    focus: function focus() {
                        return true;
                    },
                    showModelessDialog: function showModelessDialog() {
                        return true;
                    },
                    showModalDialog: function showModalDialog() {
                        return true;
                    },
                    prompt: function prompt() {
                        return true;
                    },
                    confirm: function confirm() {
                        return true;
                    },
                    alert: function alert() {
                        return true;
                    },
                    moveTo: function moveTo() {
                        return true;
                    },
                    moveBy: function moveBy() {
                        return true;
                    },
                    resizeTo: function resizeTo() {
                        return true;
                    },
                    resizeBy: function resizeBy() {
                        return true;
                    },
                    scrollBy: function scrollBy() {
                        return true;
                    },
                    scrollTo: function scrollTo() {
                        return true;
                    },
                    getSelection: function getSelection() {
                        return true;
                    },
                    onunload: function onunload() {
                        return true;
                    },
                    print: function print() {
                        return true;
                    },
                    open: function open() {
                        return this;
                    },

                    opener: window,
                    closed: false,
                    innerHeight: 480,
                    innerWidth: 640,
                    name: openWndArguments[1],
                    location: location,
                    document: {
                        location: location
                    }
                };

                copyMissingProperties(window, generatedWindow);

                generatedWindow.window = generatedWindow;

                var windowName = getWindowName(openWndArguments);
                if (windowName != null) {
                    try {
                        windowsWithNames[windowName].close();
                    } catch (err) { }
                }

                var fnGetUrl = function fnGetUrl() {
                    var url = void 0;
                    if (!(generatedWindow.location instanceof Object)) {
                        url = generatedWindow.location;
                    } else if (!(generatedWindow.document.location instanceof Object)) {
                        url = generatedWindow.document.location;
                    } else if (location.href != null) {
                        url = location.href;
                    } else {
                        url = openWndArguments[0];
                    }
                    openWndArguments[0] = url;

                    blockedWndNotification(openWndArguments);
                };

                //why set timeout?  if anyone finds a reason for it, please write it here
                //in iframes it makes problems so i'm avoiding it there
                if (top == self) {
                    setTimeout(fnGetUrl, 100);
                } else {
                    fnGetUrl();
                }
            })();
        }
        return generatedWindow;
    }

    // window[originalOpenWndFnKey] = window.open; // save the original open window as global param
    function pbWindowOpen() {
        try {
            return newWindowOpenFn.apply(this, arguments);
        } catch (err) {
            return null;
        }
    }

    /////////////////////////////////////////////////////////////////////////////////
    // Replace the window open method with Poper Blocker's
    /////////////////////////////////////////////////////////////////////////////////
    window.open = pbWindowOpen;
    /////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Monitor dynamic html element creation to prevent generating &lt;a&gt; elements with click dispatching event
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    HTMLElement.prototype.appendChild = function () {
        var newElement = originalAppendChildFn.apply(this, arguments);

        if (newElement.nodeName == 'IFRAME' &amp;&amp; newElement.contentWindow) {
            try {
                var code = "(function () {\n" + inject.toString() + ";\n inject();\n })();";
                newElement.contentWindow.eval(code);
            } catch (e) { }
        }

        return newElement;
    };

    document.createElement = function () {

        var newElement = originalCreateElementFn.apply(document, arguments);

        if (arguments[0] == "a" || arguments[0] == "A") {
            (function () {

                timeSinceCreateAElement = new Date().getTime();

                var originalDispatchEventFn = newElement.dispatchEvent;

                newElement.dispatchEvent = function (event) {
                    if (event.type != null &amp;&amp; ("" + event.type).toLocaleLowerCase() == "click") {
                        window.pbreason = "blocked due to an explicit dispatchEvent event with type 'click' on an 'a' tag";

                        blockedWndNotification({
                            "0": newElement.href
                        });

                        return true;
                    }

                    return originalDispatchEventFn.call(this, event);
                };

                lastCreatedAElement = newElement;
            })();
        }

        return newElement;
    };
    /////////////////////////////////////////////////////////////////////////////////


    /////////////////////////////////////////////////////////////////////////////////
    // Block artificial mouse click on frashly created &lt;a&gt; elements
    /////////////////////////////////////////////////////////////////////////////////
    document.createEvent = function () {
        try {
            if (arguments[0].toLowerCase().includes("mouse") &amp;&amp; new Date().getTime() - timeSinceCreateAElement &lt;= 50) {
                //block if the origin is not same
                var isSelfDomain = false;
                try {
                    var openUrlDomain = new URL(lastCreatedAElement.href).hostname;
                    var topUrl = window.location != window.parent.location ? document.referrer : document.location.href;
                    var topDomain = new URL(topUrl).hostname;
                    isSelfDomain = openUrlDomain == topDomain;
                } catch (e) { }
                if (lastCreatedAElement.href.trim() &amp;&amp; !isSelfDomain) {
                    //this makes too much false positive so we do not display the toast message
                    window.pbreason = "Blocked because 'a' element was recently created and " + arguments[0] + " event was created shortly after";
                    arguments[0] = lastCreatedAElement.href;

                    blockedWndNotification({
                        "0": lastCreatedAElement.href
                    });

                    return {
                        type: 'click',
                        initMouseEvent: function initMouseEvent() { }
                    };
                }
            }

            return originalCreateEventFn.apply(document, arguments);
        } catch (err) { }
    };
    /////////////////////////////////////////////////////////////////////////////////


    /////////////////////////////////////////////////////////////////////////////////
    // Monitor full screen requests
    /////////////////////////////////////////////////////////////////////////////////
    function onFullScreen(isInFullScreenMode) {
        if (isInFullScreenMode) {
            fullScreenOpenTime = new Date().getTime();
        } else {
            fullScreenOpenTime = NaN;
        }
    }

    /////////////////////////////////////////////////////////////////////////////////

    function isDocumentInFullScreenMode() {
        // Note that the browser fullscreen (triggered by short keys) might
        // be considered different from content fullscreen when expecting a boolean
        return document.fullScreenElement &amp;&amp; document.fullScreenElement !== null || // alternative standard methods
            document.mozFullscreenElement != null || document.webkitFullscreenElement != null; // current working methods
    }


    function blockedWndNotification(openWndArguments) {
        //this is to prevent a site that "stuck" on trying to open a new window to send endless calls to the extension
        if (!lastBlockTime || lastBlockTime &lt; Date.now() - 1000) {
            openWndArguments["abd"] = abd;
            parentRef.postMessage({
                type: "blockedWindow",
                args: JSON.stringify(openWndArguments)
            }, parentOrigin);
        }

        lastBlockTime = Date.now();
    }

    function executeCommand(commandId, messageId) {
        if (messageId == pb_message) {
            switch (commandId) {
                case 0:
                    //off
                    window.open = originalWindowOpenFn;
                    document.createElement = originalCreateElementFn;
                    document.createEvent = originalCreateEventFn;
                    HTMLElement.prototype.appendChild = originalCreateElementFn;
                    break;
                case 1:
                    //allow once
                    allowOnce = lastBlockCaller.caller.toString();
                    lastBlockCaller.caller.apply(lastBlockCaller.caller, lastBlockCaller.args);
                    break;
            }
        }
    }

    document.addEventListener("fullscreenchange", function () {
        onFullScreen(document.fullscreen);
    }, false);

    document.addEventListener("mozfullscreenchange", function () {
        onFullScreen(document.mozFullScreen);
    }, false);

    document.addEventListener("webkitfullscreenchange", function () {
        onFullScreen(document.webkitIsFullScreen);
    }, false);

    (function () {
        window.pbExternalCommand = function (commandId, messageId) {
            executeCommand(commandId, messageId);
        };
    })();
};
          inject();
        })();</script><g>
	<g>
		<path d="M473.275,377.783l-63.633-63.647c-16.978-16.978-46.641-17.007-63.647,0l-10.613,10.613l127.28,127.28l10.613-10.613    C490.893,423.798,490.835,395.314,473.275,377.783z" data-original="#000000" class="active-path" fill="#FFFFFF"/>
	</g>
</g><g>
	<g>
		<path d="M197.503,102.012L133.87,38.365c-16.978-16.992-46.641-16.992-63.647,0L59.61,48.978l127.28,127.28l10.613-10.613    C215.122,148.027,215.063,119.543,197.503,102.012z" data-original="#000000" class="active-path" fill="#FFFFFF"/>
	</g>
</g><g>
	<g>
		<path d="M313.583,345.372c-13.391,10.38-32.492,9.943-44.727-2.305L168.572,242.784c-12.261-12.261-12.675-31.37-2.307-44.729    L39.276,71.066c-54.63,63.68-52.493,159.631,7.802,219.926l173.569,173.569c57.849,57.848,152.629,65.537,219.926,7.802    L313.583,345.372z" data-original="#000000" class="active-path" fill="#FFFFFF"/>
	</g>
</g><g>
	<g>
		<path d="M467,0H287c-24.814,0-45,20.186-45,45v120c0,24.814,20.186,45,45,45h15v45c0,13.376,16.225,19.986,25.605,10.605    L383.211,210H467c24.814,0,45-20.186,45-45V45C512,20.186,491.814,0,467,0z M377,150h-60c-19.774,0-19.854-30,0-30h60    C396.774,120,396.854,150,377,150z M437,90H317c-19.774,0-19.854-30,0-30h120C456.774,60,456.854,90,437,90z" data-original="#000000" class="active-path" fill="#FFFFFF"/>
	</g>
</g></g> </svg>
